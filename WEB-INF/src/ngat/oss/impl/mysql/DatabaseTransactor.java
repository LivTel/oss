package ngat.oss.impl.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Locale;
import java.util.SimpleTimeZone;

import org.apache.log4j.Logger;

public class DatabaseTransactor {
	
	static Logger logger = Logger.getLogger(DatabaseTransactor.class);
	
	//public static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
	public static final SimpleTimeZone UTC = new SimpleTimeZone(0, "UTC");
	public static Locale UK_LOCALE = Locale.UK;
	
	private static DatabaseTransactor instance = null;
	
	public static DatabaseTransactor getInstance() {
		if (instance == null) {
			instance = new DatabaseTransactor();
		}
		return instance;
	}
	
	private DatabaseTransactor() { }
	
	/**
	 * Method to run a query on the JDBC connection in the ConnectionPool
	 * @param statement The prepared statement containing the query details
	 * @param sqlStr The SQL query to run (included for logging purposes)
	 * @return The results of the query
	 */
	public synchronized ResultSet executeQueryStatement(PreparedStatement statement, String sqlStr) {
		try {
			logger.info("executing query statement [" + sqlStr + "]");
			return statement.executeQuery();
		} catch(Exception e) {
			logger.error(sqlStr);
			logger.error(e);
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * Method to run a query on the JDBC connection in the ConnectionPool
	 * @param statement The prepared statement containing the query details
	 * @param sqlstr The SQL query to run (is required in order to return generated keys, is also included for logging purposes)
	 * @param returnGeneratedKeys Whether the method should return keys generated by the query
	 * @return The first primary key generated by the query, or 0 If no key was required to be returned or -1 if there was an error
	 * @throws Exception 
	 */
	public synchronized int executeUpdateStatement(Connection connection, PreparedStatement statement, String sqlStr, boolean returnGeneratedKeys) throws Exception {
		
		ResultSet results = null;
		try {
			//more detailed logging possible?
			logger.info("executing update statement [" + sqlStr + "]");
			if (returnGeneratedKeys) {
				int numRows = statement.executeUpdate();
				logger.info("... num rows affected= "+numRows);
				
				int id = -1;
				results = statement.getGeneratedKeys();
				if (results.next()) {
					id = results.getInt(1);
				}
				logger.info("... new item id= "+id); 
				
				return id;
			} else {
				//return row count of rows affected by query
				int numRows = statement.executeUpdate();
				logger.info("... num rows affected= "+numRows);
				return numRows;
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		} 
	}
}
